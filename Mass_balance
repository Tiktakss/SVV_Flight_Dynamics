import numpy as np
import matplotlib.pyplot as plt
from Cl_Cd_Plot import C_l

#import classes
from aero_tools import Aero_Tools
aero = Aero_Tools()
from excel_tools import import_excel
excel = import_excel('./Post_Flight_Datasheet_03_05_V3.xlsx')

#Inputs
blockfuel = 4090.0 #lbs #obtained from written data sheet
empty_weight = 9165.0 #lbs #obtained from Mass & Balance report
Arm_seat12 = 131.0 #inch #obtained from appendix E
Arm_seat910 = 170.0 #inch #obtained from appendix E
Arm_seat34 = 214.0 #inch #obtained from appendix E
Arm_seat56 = 251.0 #inch #obtained from appendix E
Arm_seat78 = 288.0 #inch #obtained from appendix E
Arm_cgshift = 145.0 #inch estimated between 1 and 9
Arm_fuel = 285.56 #inch #obtained from Mass & Balance report
Arm_BEM = 292.18 #inch #obtained from Mass & Balance report

#obtain data for mass balance
data = import_excel.Cl_Cd_data(excel)
data_trim_curve = import_excel.trimcurve_data(excel)
data_cg_shift_data = import_excel.cg_shift_data(excel)
weight_people = sum(import_excel.weights(excel))/0.453592 #lbs
total_weight = weight_people + blockfuel + empty_weight

#Calculate moments for people and BEM
moment_p1 = import_excel.weights(excel)[0] * Arm_seat12  # lbs*inch
moment_p2 = import_excel.weights(excel)[1] * Arm_seat12  # lbs*inch
moment_p10 = import_excel.weights(excel)[2] * Arm_seat910  # lbs*inch
moment_p3 = import_excel.weights(excel)[3] * Arm_seat34  # lbs*inch
moment_p4 = import_excel.weights(excel)[4] * Arm_seat34  # lbs*inch
moment_p5 = import_excel.weights(excel)[5] * Arm_seat56  # lbs*inch
moment_p6 = import_excel.weights(excel)[6] * Arm_seat56  # lbs*inch
moment_p7 = import_excel.weights(excel)[7] * Arm_seat78  # lbs*inch
moment_p8 = import_excel.weights(excel)[8] * Arm_seat78  # lbs*inch
moment_CGshift = import_excel.weights(excel)[8] * Arm_cgshift
moment_BEM = empty_weight * Arm_BEM  # lbs*inch

#Empty arrays
AOA = np.zeros(len(data_trim_curve)+len(data_cg_shift_data))
de = np.zeros(len(data_trim_curve)+len(data_cg_shift_data))
Fe = np.zeros(len(data_trim_curve)+len(data_cg_shift_data))
V = np.zeros(len(data_trim_curve)+len(data_cg_shift_data))
Center_gravity = np.zeros(len(data)+1)

#CG shift due to fuel flow
for i in range(len(data)):
    row = data[i]
    weight_fuel = blockfuel - row[8] #lbs
    total_weight = weight_people + weight_fuel + empty_weight #lbs
    moment_fuel = weight_fuel*Arm_fuel #lbs*inch
    Center_gravity[i] = (moment_fuel+moment_BEM+moment_p1+moment_p2+moment_p10+moment_p3\
                         +moment_p4+moment_p5+moment_p6+moment_p7+moment_p8)/total_weight #cm
#After CG shift
Center_gravity[len(data)] = (Center_gravity[len(data)-1]*total_weight-moment_p8+moment_CGshift)/total_weight#cm

#Put data from PFD into arrays
for i in range(len(data_trim_curve)):
    row = data_trim_curve[i]
    AOA[i] = row[5]
    de[i] = row[6]
    Fe[i] = row[8]
    V[i] = row[4]

#After cg shifts
for i in range(len(data_cg_shift_data)):
    row = data_cg_shift_data[i]
    AOA[i+len(data_trim_curve)] = row[5]
    de[i+len(data_trim_curve)] = row[6]
    Fe[i+len(data_trim_curve)] = row[8]
    V[i+len(data_trim_curve)] = row[4]


#Calculation for Cm_delta and Cm_alpha
slope = (de[5]-de[0])/(AOA[5]-AOA[0])
Cm_delta = -C_l[5]*(Center_gravity[6]-Center_gravity[5])*0.0254/((de[8]-de[6])*2.0569)
Cm_alpha = -Cm_delta*slope

#Plotting
plt.subplot(221)
plt.scatter([0,1,2,3,4,5,6],Center_gravity)
plt.title("Center of Gravity")
plt.ylabel("Distance from nose[inch]")
plt.xlabel("Measurements")

plt.subplot(222)
plt.scatter(V,de)
plt.title("Elevator trim curve")
plt.ylabel("$\delta_e[deg]$")
plt.xlabel("Velocity [kts]")

plt.subplot(223)
plt.scatter(AOA,Fe)
plt.title("Control force curve")
plt.ylabel("$F_e$[N]")
plt.xlabel("$\\alpha[deg]$")
plt.show()


